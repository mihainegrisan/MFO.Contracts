name: Build, Pack & Release

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to push commits and tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Ensure MFO.Contracts.csproj and <Version> exist
        run: |
          if [ ! -f MFO.Contracts.csproj ]; then
            echo "MFO.Contracts.csproj not found!"
            exit 1
          fi
          if ! grep -q "<Version>" MFO.Contracts.csproj; then
            echo "<Version> element not found in MFO.Contracts.csproj!"
            exit 1
          fi

      - name: Get version from csproj
        id: get_version
        run: |
          VERSION=$(sed -n 's:.*<Version>\(.*\)</Version>.*:\1:p' MFO.Contracts.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump patch version
        id: bump
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.get_version.outputs.version }}"
          patch=$((patch+1))
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update csproj with new version
        run: |
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.bump.outputs.new_version }}<\/Version>/" **/*.csproj
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add **/*.csproj
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          git tag v${{ steps.bump.outputs.new_version }}
          git push
          git push origin v${{ steps.bump.outputs.new_version }}

      - name: Pack
        run: dotnet pack --configuration Release -p:PackageVersion=${{ steps.bump.outputs.new_version }} -o ./artifacts

      - name: Push to GitHub Packages
        run: dotnet nuget push ./artifacts/*.nupkg \
          --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: Release ${{ steps.bump.outputs.new_version }}
          files: ./artifacts/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}